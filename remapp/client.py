import urllib, urllib2
import config
import json
import hashlib
import pprint

class Client():
    def __init__(self, user, pw):
        self.url = config.api_hook
        self.parser = JsonParser()
        self.user = user
        self.pw = hashlib.sha256(pw).hexdigest()

        # super(Client, self).__init__(self)

    def isbn_lookup(self, isbn):
        return self.request('isbn_lookup', {'isbn': isbn})

    def add_book(self, bookdata):
        # fix author
        if bookdata['author'] is not None:
            bookdata['author_name'] = bookdata['author']['name']
            bookdata['author_id'] = bookdata['author']['id']

        data = bookdata
        auth = self.authenticator('add_book',data)
        return self.request('add_book', data, auth=auth)

    # Sends a generic request to a certian resource on the server and returns the response
    # data is a dictionary that is  parsable
    # auth is a dictionary, generated by authenticator function
    def request(self, resource, data, auth=None):

        payload = {'data':self.parser.dump(data)}
        if auth is not None:
            payload['auth'] = self.parser.dump(auth)

        payload = urllib.urlencode(payload)

        resp = urllib2.urlopen(url=(self.url+resource), data=payload).read()
        return self.parser.parse(resp)


    def test_auth(self):
        data = {'id':1,'title':'All The Wild Horses'}
        auth = self.authenticator('test_auth', data)
        return self.request('test_auth', data, auth)


    # Creates an authentication string for the server to verify
    def authenticator(self, resource, data):
        # get the fields under auth
        # user, challenge, hash, resource, digest
        # protocol hashes the following string:username+resource+digest+challenge+secret
        # where:
        #   secret is the sha256 of the user's pw
        #   digest is the digest of the 'data' object in the request, sha256 hex

        # to verify I need to query the users' pw, reconstruct the hash and verify it is the same
        auth = {}
        auth['user'] = self.user
        auth['challenge'] = 123456789
        auth['resource'] = resource

        digest = json.dumps(data)
        print digest
        digest = hashlib.sha256(digest).hexdigest()
        auth['digest'] = digest

        hashinput = '%s+%s+%s+%s+%s' % (self.user, resource, digest, auth['challenge'], self.pw)
        hashstr = hashlib.sha256(hashinput).hexdigest()
        print hashinput
        print 'STRING: ' + hashstr
        auth['hash'] = hashstr
        return auth

class Parser(object):
    def __init__(self):
        pass

    def parse(self, resp):
        return 'Parse method must be overridden'

    def dump(self, resp):
        return 'Dump method must be overridden'

class JsonParser(Parser):
    def parse(self, resp):
        return json.loads(resp)

    def dump(self, resp):
        return json.dumps(resp)


if __name__ == '__main__':
    c = Client('meg','1234')
    bookdata = c.isbn_lookup('9780817405021')
    # resp = c.test_auth()
    print type(bookdata)

    pp = pprint.PrettyPrinter()
    pp.pprint(bookdata['book'])

    print 'SUBMITTING BOOK AGAIN'
    # now submit the book again
    resp = c.add_book(bookdata['book'])

    pp.pprint(resp)
